
NerfAVR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000012e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000028  00800060  0000012e  000001c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000012  00800088  00800088  000001ea  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001ea  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000021c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a0  00000000  00000000  0000025c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000859  00000000  00000000  000002fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000723  00000000  00000000  00000b55  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003b7  00000000  00000000  00001278  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000b4  00000000  00000000  00001630  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003d7  00000000  00000000  000016e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000046  00000000  00000000  00001abb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00001b01  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	14 c0       	rjmp	.+40     	; 0x2a <__ctors_end>
   2:	2e c0       	rjmp	.+92     	; 0x60 <__bad_interrupt>
   4:	2d c0       	rjmp	.+90     	; 0x60 <__bad_interrupt>
   6:	2c c0       	rjmp	.+88     	; 0x60 <__bad_interrupt>
   8:	2b c0       	rjmp	.+86     	; 0x60 <__bad_interrupt>
   a:	2a c0       	rjmp	.+84     	; 0x60 <__bad_interrupt>
   c:	29 c0       	rjmp	.+82     	; 0x60 <__bad_interrupt>
   e:	28 c0       	rjmp	.+80     	; 0x60 <__bad_interrupt>
  10:	27 c0       	rjmp	.+78     	; 0x60 <__bad_interrupt>
  12:	26 c0       	rjmp	.+76     	; 0x60 <__bad_interrupt>
  14:	25 c0       	rjmp	.+74     	; 0x60 <__bad_interrupt>
  16:	24 c0       	rjmp	.+72     	; 0x60 <__bad_interrupt>
  18:	23 c0       	rjmp	.+70     	; 0x60 <__bad_interrupt>
  1a:	22 c0       	rjmp	.+68     	; 0x60 <__bad_interrupt>
  1c:	21 c0       	rjmp	.+66     	; 0x60 <__bad_interrupt>
  1e:	20 c0       	rjmp	.+64     	; 0x60 <__bad_interrupt>
  20:	1f c0       	rjmp	.+62     	; 0x60 <__bad_interrupt>
  22:	1e c0       	rjmp	.+60     	; 0x60 <__bad_interrupt>
  24:	1d c0       	rjmp	.+58     	; 0x60 <__bad_interrupt>
  26:	1c c0       	rjmp	.+56     	; 0x60 <__bad_interrupt>
  28:	1b c0       	rjmp	.+54     	; 0x60 <__bad_interrupt>

0000002a <__ctors_end>:
  2a:	11 24       	eor	r1, r1
  2c:	1f be       	out	0x3f, r1	; 63
  2e:	cf e5       	ldi	r28, 0x5F	; 95
  30:	d1 e0       	ldi	r29, 0x01	; 1
  32:	de bf       	out	0x3e, r29	; 62
  34:	cd bf       	out	0x3d, r28	; 61

00000036 <__do_copy_data>:
  36:	10 e0       	ldi	r17, 0x00	; 0
  38:	a0 e6       	ldi	r26, 0x60	; 96
  3a:	b0 e0       	ldi	r27, 0x00	; 0
  3c:	ee e2       	ldi	r30, 0x2E	; 46
  3e:	f1 e0       	ldi	r31, 0x01	; 1
  40:	02 c0       	rjmp	.+4      	; 0x46 <__SREG__+0x7>
  42:	05 90       	lpm	r0, Z+
  44:	0d 92       	st	X+, r0
  46:	a8 38       	cpi	r26, 0x88	; 136
  48:	b1 07       	cpc	r27, r17
  4a:	d9 f7       	brne	.-10     	; 0x42 <__SREG__+0x3>

0000004c <__do_clear_bss>:
  4c:	20 e0       	ldi	r18, 0x00	; 0
  4e:	a8 e8       	ldi	r26, 0x88	; 136
  50:	b0 e0       	ldi	r27, 0x00	; 0
  52:	01 c0       	rjmp	.+2      	; 0x56 <.do_clear_bss_start>

00000054 <.do_clear_bss_loop>:
  54:	1d 92       	st	X+, r1

00000056 <.do_clear_bss_start>:
  56:	aa 39       	cpi	r26, 0x9A	; 154
  58:	b2 07       	cpc	r27, r18
  5a:	e1 f7       	brne	.-8      	; 0x54 <.do_clear_bss_loop>
  5c:	02 d0       	rcall	.+4      	; 0x62 <main>
  5e:	65 c0       	rjmp	.+202    	; 0x12a <_exit>

00000060 <__bad_interrupt>:
  60:	cf cf       	rjmp	.-98     	; 0x0 <__vectors>

00000062 <main>:
 *      If this function returns, we're in trouble.
 *
 */
int16_t main(void)
{
	gvPrint("Entering main.\n");
  62:	80 e6       	ldi	r24, 0x60	; 96
  64:	90 e0       	ldi	r25, 0x00	; 0
  66:	07 d0       	rcall	.+14     	; 0x76 <gvPrint>
	
    /* Enter OS */
    gvOS_enter();
  68:	08 d0       	rcall	.+16     	; 0x7a <gvOS_enter>
	
	gvPrint("Exiting now.\n");
  6a:	80 e7       	ldi	r24, 0x70	; 112
  6c:	90 e0       	ldi	r25, 0x00	; 0
  6e:	03 d0       	rcall	.+6      	; 0x76 <gvPrint>

	return 1;
  70:	81 e0       	ldi	r24, 0x01	; 1
  72:	90 e0       	ldi	r25, 0x00	; 0
  74:	08 95       	ret

00000076 <gvPrint>:
 *	Returns:
 *		N/A
 *
 */
void gvPrint(char *pszString)
{
  76:	08 95       	ret

00000078 <gvTimer_sleepMs>:
 *	Returns:
 *		N/A
 *
 */
void gvTimer_sleepMs(uint16_t uwTimeMs)
{
  78:	08 95       	ret

0000007a <gvOS_enter>:
 *
 */
static void vOS_initTasks(void)
{
	/* Printer task */
	xTaskPool[OS_TASK_PRINTER].uwRateMs = 10u;
  7a:	e8 e8       	ldi	r30, 0x88	; 136
  7c:	f0 e0       	ldi	r31, 0x00	; 0
  7e:	8a e0       	ldi	r24, 0x0A	; 10
  80:	90 e0       	ldi	r25, 0x00	; 0
  82:	91 83       	std	Z+1, r25	; 0x01
  84:	80 83       	st	Z, r24
	xTaskPool[OS_TASK_PRINTER].uwTicks = 2u;
  86:	22 e0       	ldi	r18, 0x02	; 2
  88:	30 e0       	ldi	r19, 0x00	; 0
  8a:	33 83       	std	Z+3, r19	; 0x03
  8c:	22 83       	std	Z+2, r18	; 0x02
	xTaskPool[OS_TASK_PRINTER].pvInitFunction = NULL_PTR;
  8e:	15 82       	std	Z+5, r1	; 0x05
  90:	14 82       	std	Z+4, r1	; 0x04
	xTaskPool[OS_TASK_PRINTER].pvStepFunction = &gvPrinter_Body;
  92:	2e e7       	ldi	r18, 0x7E	; 126
  94:	30 e0       	ldi	r19, 0x00	; 0
  96:	37 83       	std	Z+7, r19	; 0x07
  98:	26 83       	std	Z+6, r18	; 0x06
	
	/* Other printer task */
	xTaskPool[OS_TASK_2].uwRateMs = 10u;
  9a:	91 87       	std	Z+9, r25	; 0x09
  9c:	80 87       	std	Z+8, r24	; 0x08
	xTaskPool[OS_TASK_2].uwTicks = 1u;
  9e:	81 e0       	ldi	r24, 0x01	; 1
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	93 87       	std	Z+11, r25	; 0x0b
  a4:	82 87       	std	Z+10, r24	; 0x0a
	xTaskPool[OS_TASK_2].pvInitFunction = NULL_PTR;
  a6:	15 86       	std	Z+13, r1	; 0x0d
  a8:	14 86       	std	Z+12, r1	; 0x0c
	xTaskPool[OS_TASK_2].pvStepFunction = NULL_PTR;
  aa:	17 86       	std	Z+15, r1	; 0x0f
  ac:	16 86       	std	Z+14, r1	; 0x0e
  ae:	0f 2e       	mov	r0, r31
  b0:	f8 e9       	ldi	r31, 0x98	; 152
  b2:	ef 2e       	mov	r14, r31
  b4:	f0 e0       	ldi	r31, 0x00	; 0
  b6:	ff 2e       	mov	r15, r31
  b8:	f0 2d       	mov	r31, r0
	
	/* Enter scheduling loop */
	for (;;)
	{
		/* Sleep for one tick */
		gvTimer_sleepMs(1u);
  ba:	81 e0       	ldi	r24, 0x01	; 1
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	dc df       	rcall	.-72     	; 0x78 <gvTimer_sleepMs>
  c0:	c8 e8       	ldi	r28, 0x88	; 136
  c2:	d0 e0       	ldi	r29, 0x00	; 0
  c4:	8e 01       	movw	r16, r28
		
		/* Loop through task pool */
		for ( eId = 0; eId < OS_NUM_TASKS; eId++)
		{
			/* Decrement task counter */
			xTaskPool[eId].uwTicks--;
  c6:	8a 81       	ldd	r24, Y+2	; 0x02
  c8:	9b 81       	ldd	r25, Y+3	; 0x03
  ca:	01 97       	sbiw	r24, 0x01	; 1
  cc:	9b 83       	std	Y+3, r25	; 0x03
  ce:	8a 83       	std	Y+2, r24	; 0x02
			
			/* Check if task is ready */
			if ( 0u == xTaskPool[eId].uwTicks )
  d0:	89 2b       	or	r24, r25
  d2:	79 f4       	brne	.+30     	; 0xf2 <gvOS_enter+0x78>
			{
				/* Null pointer check */
				if ( NULL_PTR != xTaskPool[eId].pvStepFunction )
  d4:	ee 81       	ldd	r30, Y+6	; 0x06
  d6:	ff 81       	ldd	r31, Y+7	; 0x07
  d8:	30 97       	sbiw	r30, 0x00	; 0
  da:	19 f0       	breq	.+6      	; 0xe2 <gvOS_enter+0x68>
				{
					/* Execute step function */
					xTaskPool[eId].pvStepFunction(xTaskPool[eId].uwRateMs);
  dc:	88 81       	ld	r24, Y
  de:	99 81       	ldd	r25, Y+1	; 0x01
  e0:	09 95       	icall
				}
				
				/* Reset task counter */
				xTaskPool[eId].uwTicks = xTaskPool[eId].uwRateMs;
  e2:	d8 01       	movw	r26, r16
  e4:	8d 91       	ld	r24, X+
  e6:	9c 91       	ld	r25, X
  e8:	11 97       	sbiw	r26, 0x01	; 1
  ea:	13 96       	adiw	r26, 0x03	; 3
  ec:	9c 93       	st	X, r25
  ee:	8e 93       	st	-X, r24
  f0:	12 97       	sbiw	r26, 0x02	; 2
  f2:	28 96       	adiw	r28, 0x08	; 8
	{
		/* Sleep for one tick */
		gvTimer_sleepMs(1u);
		
		/* Loop through task pool */
		for ( eId = 0; eId < OS_NUM_TASKS; eId++)
  f4:	ce 15       	cp	r28, r14
  f6:	df 05       	cpc	r29, r15
  f8:	29 f7       	brne	.-54     	; 0xc4 <gvOS_enter+0x4a>
  fa:	df cf       	rjmp	.-66     	; 0xba <gvOS_enter+0x40>

000000fc <gvPrinter_Body>:
 */
void gvPrinter_Body(uint16_t uwCallRateMs)
{
	static uint16_t suwTimerMs = 0u;
	
	suwTimerMs += uwCallRateMs;
  fc:	20 91 98 00 	lds	r18, 0x0098	; 0x800098 <suwTimerMs.1596>
 100:	30 91 99 00 	lds	r19, 0x0099	; 0x800099 <suwTimerMs.1596+0x1>
 104:	82 0f       	add	r24, r18
 106:	93 1f       	adc	r25, r19
	
	if ( 1000u <= suwTimerMs )
 108:	88 3e       	cpi	r24, 0xE8	; 232
 10a:	23 e0       	ldi	r18, 0x03	; 3
 10c:	92 07       	cpc	r25, r18
 10e:	28 f4       	brcc	.+10     	; 0x11a <gvPrinter_Body+0x1e>
 */
void gvPrinter_Body(uint16_t uwCallRateMs)
{
	static uint16_t suwTimerMs = 0u;
	
	suwTimerMs += uwCallRateMs;
 110:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <suwTimerMs.1596+0x1>
 114:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <suwTimerMs.1596>
 118:	08 95       	ret
	
	if ( 1000u <= suwTimerMs )
	{
		suwTimerMs = 0u;
 11a:	10 92 99 00 	sts	0x0099, r1	; 0x800099 <suwTimerMs.1596+0x1>
 11e:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <suwTimerMs.1596>
		
		gvPrint("Task 1.\n");
 122:	8e e7       	ldi	r24, 0x7E	; 126
 124:	90 e0       	ldi	r25, 0x00	; 0
 126:	a7 df       	rcall	.-178    	; 0x76 <gvPrint>
 128:	08 95       	ret

0000012a <_exit>:
 12a:	f8 94       	cli

0000012c <__stop_program>:
 12c:	ff cf       	rjmp	.-2      	; 0x12c <__stop_program>
